/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.food.tables;


import com.pip.chatbot.jooq.food.Food;
import com.pip.chatbot.jooq.food.Keys;
import com.pip.chatbot.jooq.food.tables.records.CuisineRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cuisine extends TableImpl<CuisineRecord> {

    private static final long serialVersionUID = -599568535;

    /**
     * The reference instance of <code>food.cuisine</code>
     */
    public static final Cuisine CUISINE = new Cuisine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CuisineRecord> getRecordType() {
        return CuisineRecord.class;
    }

    /**
     * The column <code>food.cuisine.cuisine</code>.
     */
    public final TableField<CuisineRecord, String> CUISINE_ = createField(DSL.name("cuisine"), org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * Create a <code>food.cuisine</code> table reference
     */
    public Cuisine() {
        this(DSL.name("cuisine"), null);
    }

    /**
     * Create an aliased <code>food.cuisine</code> table reference
     */
    public Cuisine(String alias) {
        this(DSL.name(alias), CUISINE);
    }

    /**
     * Create an aliased <code>food.cuisine</code> table reference
     */
    public Cuisine(Name alias) {
        this(alias, CUISINE);
    }

    private Cuisine(Name alias, Table<CuisineRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cuisine(Name alias, Table<CuisineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Cuisine(Table<O> child, ForeignKey<O, CuisineRecord> key) {
        super(child, key, CUISINE);
    }

    @Override
    public Schema getSchema() {
        return Food.FOOD;
    }

    @Override
    public UniqueKey<CuisineRecord> getPrimaryKey() {
        return Keys.CUISINE_PKEY;
    }

    @Override
    public List<UniqueKey<CuisineRecord>> getKeys() {
        return Arrays.<UniqueKey<CuisineRecord>>asList(Keys.CUISINE_PKEY);
    }

    @Override
    public Cuisine as(String alias) {
        return new Cuisine(DSL.name(alias), this);
    }

    @Override
    public Cuisine as(Name alias) {
        return new Cuisine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cuisine rename(String name) {
        return new Cuisine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cuisine rename(Name name) {
        return new Cuisine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
