/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.food.tables;


import com.pip.chatbot.jooq.food.Food;
import com.pip.chatbot.jooq.food.Keys;
import com.pip.chatbot.jooq.food.tables.records.MarkFoodRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkFood extends TableImpl<MarkFoodRecord> {

    private static final long serialVersionUID = -1088988032;

    /**
     * The reference instance of <code>food.mark_food</code>
     */
    public static final MarkFood MARK_FOOD = new MarkFood();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkFoodRecord> getRecordType() {
        return MarkFoodRecord.class;
    }

    /**
     * The column <code>food.mark_food.id</code>.
     */
    public final TableField<MarkFoodRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('food.mark_food_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>food.mark_food.restaurant_id</code>.
     */
    public final TableField<MarkFoodRecord, Integer> RESTAURANT_ID = createField(DSL.name("restaurant_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>food.mark_food.mark</code>.
     */
    public final TableField<MarkFoodRecord, Double> MARK = createField(DSL.name("mark"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>food.mark_food</code> table reference
     */
    public MarkFood() {
        this(DSL.name("mark_food"), null);
    }

    /**
     * Create an aliased <code>food.mark_food</code> table reference
     */
    public MarkFood(String alias) {
        this(DSL.name(alias), MARK_FOOD);
    }

    /**
     * Create an aliased <code>food.mark_food</code> table reference
     */
    public MarkFood(Name alias) {
        this(alias, MARK_FOOD);
    }

    private MarkFood(Name alias, Table<MarkFoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkFood(Name alias, Table<MarkFoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MarkFood(Table<O> child, ForeignKey<O, MarkFoodRecord> key) {
        super(child, key, MARK_FOOD);
    }

    @Override
    public Schema getSchema() {
        return Food.FOOD;
    }

    @Override
    public Identity<MarkFoodRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MARK_FOOD;
    }

    @Override
    public UniqueKey<MarkFoodRecord> getPrimaryKey() {
        return Keys.MARK_FOOD_PKEY;
    }

    @Override
    public List<UniqueKey<MarkFoodRecord>> getKeys() {
        return Arrays.<UniqueKey<MarkFoodRecord>>asList(Keys.MARK_FOOD_PKEY);
    }

    @Override
    public List<ForeignKey<MarkFoodRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MarkFoodRecord, ?>>asList(Keys.MARK_FOOD__MARK_FOOD_RESTAURANT_ID_FKEY);
    }

    public Restaurant restaurant() {
        return new Restaurant(this, Keys.MARK_FOOD__MARK_FOOD_RESTAURANT_ID_FKEY);
    }

    @Override
    public MarkFood as(String alias) {
        return new MarkFood(DSL.name(alias), this);
    }

    @Override
    public MarkFood as(Name alias) {
        return new MarkFood(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkFood rename(String name) {
        return new MarkFood(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkFood rename(Name name) {
        return new MarkFood(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
