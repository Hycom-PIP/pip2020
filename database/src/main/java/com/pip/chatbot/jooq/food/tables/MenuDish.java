/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.food.tables;


import com.pip.chatbot.jooq.food.Food;
import com.pip.chatbot.jooq.food.Keys;
import com.pip.chatbot.jooq.food.tables.records.MenuDishRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MenuDish extends TableImpl<MenuDishRecord> {

    private static final long serialVersionUID = -1994190499;

    /**
     * The reference instance of <code>food.menu_dish</code>
     */
    public static final MenuDish MENU_DISH = new MenuDish();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuDishRecord> getRecordType() {
        return MenuDishRecord.class;
    }

    /**
     * The column <code>food.menu_dish.menu_id</code>.
     */
    public final TableField<MenuDishRecord, Integer> MENU_ID = createField(DSL.name("menu_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('food.menu_dish_menu_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>food.menu_dish.dish_id</code>.
     */
    public final TableField<MenuDishRecord, Integer> DISH_ID = createField(DSL.name("dish_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('food.menu_dish_dish_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>food.menu_dish.price</code>.
     */
    public final TableField<MenuDishRecord, Float> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * Create a <code>food.menu_dish</code> table reference
     */
    public MenuDish() {
        this(DSL.name("menu_dish"), null);
    }

    /**
     * Create an aliased <code>food.menu_dish</code> table reference
     */
    public MenuDish(String alias) {
        this(DSL.name(alias), MENU_DISH);
    }

    /**
     * Create an aliased <code>food.menu_dish</code> table reference
     */
    public MenuDish(Name alias) {
        this(alias, MENU_DISH);
    }

    private MenuDish(Name alias, Table<MenuDishRecord> aliased) {
        this(alias, aliased, null);
    }

    private MenuDish(Name alias, Table<MenuDishRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MenuDish(Table<O> child, ForeignKey<O, MenuDishRecord> key) {
        super(child, key, MENU_DISH);
    }

    @Override
    public Schema getSchema() {
        return Food.FOOD;
    }

    @Override
    public Identity<MenuDishRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MENU_DISH;
    }

    @Override
    public UniqueKey<MenuDishRecord> getPrimaryKey() {
        return Keys.RESTAURANT_CUISINE_PRIMARYKEY;
    }

    @Override
    public List<UniqueKey<MenuDishRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuDishRecord>>asList(Keys.RESTAURANT_CUISINE_PRIMARYKEY);
    }

    @Override
    public List<ForeignKey<MenuDishRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MenuDishRecord, ?>>asList(Keys.MENU_DISH__MENU_DISH_MENU_ID_FKEY, Keys.MENU_DISH__MENU_DISH_DISH_ID_FKEY);
    }

    public Menu menu() {
        return new Menu(this, Keys.MENU_DISH__MENU_DISH_MENU_ID_FKEY);
    }

    public Dish dish() {
        return new Dish(this, Keys.MENU_DISH__MENU_DISH_DISH_ID_FKEY);
    }

    @Override
    public MenuDish as(String alias) {
        return new MenuDish(DSL.name(alias), this);
    }

    @Override
    public MenuDish as(Name alias) {
        return new MenuDish(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuDish rename(String name) {
        return new MenuDish(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuDish rename(Name name) {
        return new MenuDish(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
