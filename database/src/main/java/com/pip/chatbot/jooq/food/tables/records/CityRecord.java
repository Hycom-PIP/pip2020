/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.food.tables.records;


import com.pip.chatbot.jooq.food.tables.City;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityRecord extends UpdatableRecordImpl<CityRecord> implements Record2<String, String> {

    private static final long serialVersionUID = -222318978;

    /**
     * Setter for <code>food.city.city</code>.
     */
    public void setCity(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>food.city.city</code>.
     */
    public String getCity() {
        return (String) get(0);
    }

    /**
     * Setter for <code>food.city.country</code>.
     */
    public void setCountry(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>food.city.country</code>.
     */
    public String getCountry() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return City.CITY.CITY_;
    }

    @Override
    public Field<String> field2() {
        return City.CITY.COUNTRY;
    }

    @Override
    public String component1() {
        return getCity();
    }

    @Override
    public String component2() {
        return getCountry();
    }

    @Override
    public String value1() {
        return getCity();
    }

    @Override
    public String value2() {
        return getCountry();
    }

    @Override
    public CityRecord value1(String value) {
        setCity(value);
        return this;
    }

    @Override
    public CityRecord value2(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public CityRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CityRecord
     */
    public CityRecord() {
        super(City.CITY);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(String city, String country) {
        super(City.CITY);

        set(0, city);
        set(1, country);
    }
}
