/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.food.tables.records;


import com.pip.chatbot.jooq.food.tables.City;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityRecord extends UpdatableRecordImpl<CityRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 997825211;

    /**
     * Setter for <code>food.city.city_id</code>.
     */
    public void setCityId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>food.city.city_id</code>.
     */
    public Integer getCityId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>food.city.city_name</code>.
     */
    public void setCityName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>food.city.city_name</code>.
     */
    public String getCityName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>food.city.country_id</code>.
     */
    public void setCountryId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>food.city.country_id</code>.
     */
    public Integer getCountryId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return City.CITY.CITY_ID;
    }

    @Override
    public Field<String> field2() {
        return City.CITY.CITY_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return City.CITY.COUNTRY_ID;
    }

    @Override
    public Integer component1() {
        return getCityId();
    }

    @Override
    public String component2() {
        return getCityName();
    }

    @Override
    public Integer component3() {
        return getCountryId();
    }

    @Override
    public Integer value1() {
        return getCityId();
    }

    @Override
    public String value2() {
        return getCityName();
    }

    @Override
    public Integer value3() {
        return getCountryId();
    }

    @Override
    public CityRecord value1(Integer value) {
        setCityId(value);
        return this;
    }

    @Override
    public CityRecord value2(String value) {
        setCityName(value);
        return this;
    }

    @Override
    public CityRecord value3(Integer value) {
        setCountryId(value);
        return this;
    }

    @Override
    public CityRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CityRecord
     */
    public CityRecord() {
        super(City.CITY);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(Integer cityId, String cityName, Integer countryId) {
        super(City.CITY);

        set(0, cityId);
        set(1, cityName);
        set(2, countryId);
    }
}
