/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.food.tables.records;


import com.pip.chatbot.jooq.food.tables.Dish;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DishRecord extends UpdatableRecordImpl<DishRecord> implements Record3<Integer, String, Float> {

    private static final long serialVersionUID = 1248325656;

    /**
     * Setter for <code>food.dish.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>food.dish.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>food.dish.dish</code>.
     */
    public void setDish(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>food.dish.dish</code>.
     */
    public String getDish() {
        return (String) get(1);
    }

    /**
     * Setter for <code>food.dish.price</code>.
     */
    public void setPrice(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>food.dish.price</code>.
     */
    public Float getPrice() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Dish.DISH.ID;
    }

    @Override
    public Field<String> field2() {
        return Dish.DISH.DISH_;
    }

    @Override
    public Field<Float> field3() {
        return Dish.DISH.PRICE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDish();
    }

    @Override
    public Float component3() {
        return getPrice();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDish();
    }

    @Override
    public Float value3() {
        return getPrice();
    }

    @Override
    public DishRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public DishRecord value2(String value) {
        setDish(value);
        return this;
    }

    @Override
    public DishRecord value3(Float value) {
        setPrice(value);
        return this;
    }

    @Override
    public DishRecord values(Integer value1, String value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DishRecord
     */
    public DishRecord() {
        super(Dish.DISH);
    }

    /**
     * Create a detached, initialised DishRecord
     */
    public DishRecord(Integer id, String dish, Float price) {
        super(Dish.DISH);

        set(0, id);
        set(1, dish);
        set(2, price);
    }
}
