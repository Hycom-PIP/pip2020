/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.fortune.tables;


import com.pip.chatbot.jooq.fortune.Fortune;
import com.pip.chatbot.jooq.fortune.Keys;
import com.pip.chatbot.jooq.fortune.tables.records.SymbolRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Symbol extends TableImpl<SymbolRecord> {

    private static final long serialVersionUID = -432102879;

    /**
     * The reference instance of <code>fortune.symbol</code>
     */
    public static final Symbol SYMBOL = new Symbol();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SymbolRecord> getRecordType() {
        return SymbolRecord.class;
    }

    /**
     * The column <code>fortune.symbol.symbol</code>.
     */
    public final TableField<SymbolRecord, String> SYMBOL_ = createField(DSL.name("symbol"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>fortune.symbol.name</code>.
     */
    public final TableField<SymbolRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>fortune.symbol.is_currency</code>.
     */
    public final TableField<SymbolRecord, Boolean> IS_CURRENCY = createField(DSL.name("is_currency"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>fortune.symbol</code> table reference
     */
    public Symbol() {
        this(DSL.name("symbol"), null);
    }

    /**
     * Create an aliased <code>fortune.symbol</code> table reference
     */
    public Symbol(String alias) {
        this(DSL.name(alias), SYMBOL);
    }

    /**
     * Create an aliased <code>fortune.symbol</code> table reference
     */
    public Symbol(Name alias) {
        this(alias, SYMBOL);
    }

    private Symbol(Name alias, Table<SymbolRecord> aliased) {
        this(alias, aliased, null);
    }

    private Symbol(Name alias, Table<SymbolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Symbol(Table<O> child, ForeignKey<O, SymbolRecord> key) {
        super(child, key, SYMBOL);
    }

    @Override
    public Schema getSchema() {
        return Fortune.FORTUNE;
    }

    @Override
    public UniqueKey<SymbolRecord> getPrimaryKey() {
        return Keys.SYMBOL_PKEY;
    }

    @Override
    public List<UniqueKey<SymbolRecord>> getKeys() {
        return Arrays.<UniqueKey<SymbolRecord>>asList(Keys.SYMBOL_PKEY, Keys.SYMBOL_NAME_KEY);
    }

    @Override
    public Symbol as(String alias) {
        return new Symbol(DSL.name(alias), this);
    }

    @Override
    public Symbol as(Name alias) {
        return new Symbol(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbol rename(String name) {
        return new Symbol(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbol rename(Name name) {
        return new Symbol(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
