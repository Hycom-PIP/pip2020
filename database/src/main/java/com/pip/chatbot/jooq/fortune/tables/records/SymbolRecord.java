/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.fortune.tables.records;


import com.pip.chatbot.jooq.fortune.tables.Symbol;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SymbolRecord extends UpdatableRecordImpl<SymbolRecord> implements Record3<String, String, Boolean> {

    private static final long serialVersionUID = 1218139084;

    /**
     * Setter for <code>fortune.symbol.symbol</code>.
     */
    public void setSymbol(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>fortune.symbol.symbol</code>.
     */
    public String getSymbol() {
        return (String) get(0);
    }

    /**
     * Setter for <code>fortune.symbol.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>fortune.symbol.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>fortune.symbol.is_currency</code>.
     */
    public void setIsCurrency(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>fortune.symbol.is_currency</code>.
     */
    public Boolean getIsCurrency() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Symbol.SYMBOL.SYMBOL_;
    }

    @Override
    public Field<String> field2() {
        return Symbol.SYMBOL.NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Symbol.SYMBOL.IS_CURRENCY;
    }

    @Override
    public String component1() {
        return getSymbol();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Boolean component3() {
        return getIsCurrency();
    }

    @Override
    public String value1() {
        return getSymbol();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Boolean value3() {
        return getIsCurrency();
    }

    @Override
    public SymbolRecord value1(String value) {
        setSymbol(value);
        return this;
    }

    @Override
    public SymbolRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SymbolRecord value3(Boolean value) {
        setIsCurrency(value);
        return this;
    }

    @Override
    public SymbolRecord values(String value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SymbolRecord
     */
    public SymbolRecord() {
        super(Symbol.SYMBOL);
    }

    /**
     * Create a detached, initialised SymbolRecord
     */
    public SymbolRecord(String symbol, String name, Boolean isCurrency) {
        super(Symbol.SYMBOL);

        set(0, symbol);
        set(1, name);
        set(2, isCurrency);
    }
}
