/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.tables;


import com.pip.chatbot.jooq.Keys;
import com.pip.chatbot.jooq.Weather;
import com.pip.chatbot.jooq.tables.records.ForecastRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Forecast extends TableImpl<ForecastRecord> {

    private static final long serialVersionUID = -1538439299;

    /**
     * The reference instance of <code>weather.forecast</code>
     */
    public static final Forecast FORECAST = new Forecast();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForecastRecord> getRecordType() {
        return ForecastRecord.class;
    }

    /**
     * The column <code>weather.forecast.id</code>.
     */
    public final TableField<ForecastRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('weather.forecast_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>weather.forecast.created_on</code>.
     */
    public final TableField<ForecastRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.date</code>.
     */
    public final TableField<ForecastRecord, LocalDateTime> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.temperature</code>.
     */
    public final TableField<ForecastRecord, Float> TEMPERATURE = createField(DSL.name("temperature"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.perceived_temperature</code>.
     */
    public final TableField<ForecastRecord, Float> PERCEIVED_TEMPERATURE = createField(DSL.name("perceived_temperature"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.wind_power</code>.
     */
    public final TableField<ForecastRecord, Float> WIND_POWER = createField(DSL.name("wind_power"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.wind_direction</code>.
     */
    public final TableField<ForecastRecord, String> WIND_DIRECTION = createField(DSL.name("wind_direction"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>weather.forecast.atmospheric_pressure</code>.
     */
    public final TableField<ForecastRecord, Float> ATMOSPHERIC_PRESSURE = createField(DSL.name("atmospheric_pressure"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.air_humidity</code>.
     */
    public final TableField<ForecastRecord, Float> AIR_HUMIDITY = createField(DSL.name("air_humidity"), org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>weather.forecast.city</code>.
     */
    public final TableField<ForecastRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * Create a <code>weather.forecast</code> table reference
     */
    public Forecast() {
        this(DSL.name("forecast"), null);
    }

    /**
     * Create an aliased <code>weather.forecast</code> table reference
     */
    public Forecast(String alias) {
        this(DSL.name(alias), FORECAST);
    }

    /**
     * Create an aliased <code>weather.forecast</code> table reference
     */
    public Forecast(Name alias) {
        this(alias, FORECAST);
    }

    private Forecast(Name alias, Table<ForecastRecord> aliased) {
        this(alias, aliased, null);
    }

    private Forecast(Name alias, Table<ForecastRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Forecast(Table<O> child, ForeignKey<O, ForecastRecord> key) {
        super(child, key, FORECAST);
    }

    @Override
    public Schema getSchema() {
        return Weather.WEATHER;
    }

    @Override
    public Identity<ForecastRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FORECAST;
    }

    @Override
    public UniqueKey<ForecastRecord> getPrimaryKey() {
        return Keys.FORECAST_PKEY;
    }

    @Override
    public List<UniqueKey<ForecastRecord>> getKeys() {
        return Arrays.<UniqueKey<ForecastRecord>>asList(Keys.FORECAST_PKEY);
    }

    @Override
    public Forecast as(String alias) {
        return new Forecast(DSL.name(alias), this);
    }

    @Override
    public Forecast as(Name alias) {
        return new Forecast(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Forecast rename(String name) {
        return new Forecast(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Forecast rename(Name name) {
        return new Forecast(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, LocalDateTime, LocalDateTime, Float, Float, Float, String, Float, Float, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
