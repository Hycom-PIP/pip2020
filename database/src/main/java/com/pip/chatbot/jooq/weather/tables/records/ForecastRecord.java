/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.weather.tables.records;


import com.pip.chatbot.jooq.weather.tables.Forecast;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForecastRecord extends UpdatableRecordImpl<ForecastRecord> implements Record10<Integer, LocalDateTime, LocalDateTime, Float, Float, Float, String, Float, Float, String> {

    private static final long serialVersionUID = -241094644;

    /**
     * Setter for <code>weather.forecast.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>weather.forecast.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>weather.forecast.created_on</code>.
     */
    public void setCreatedOn(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>weather.forecast.created_on</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>weather.forecast.date</code>.
     */
    public void setDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>weather.forecast.date</code>.
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>weather.forecast.temperature</code>.
     */
    public void setTemperature(Float value) {
        set(3, value);
    }

    /**
     * Getter for <code>weather.forecast.temperature</code>.
     */
    public Float getTemperature() {
        return (Float) get(3);
    }

    /**
     * Setter for <code>weather.forecast.perceived_temperature</code>.
     */
    public void setPerceivedTemperature(Float value) {
        set(4, value);
    }

    /**
     * Getter for <code>weather.forecast.perceived_temperature</code>.
     */
    public Float getPerceivedTemperature() {
        return (Float) get(4);
    }

    /**
     * Setter for <code>weather.forecast.wind_power</code>.
     */
    public void setWindPower(Float value) {
        set(5, value);
    }

    /**
     * Getter for <code>weather.forecast.wind_power</code>.
     */
    public Float getWindPower() {
        return (Float) get(5);
    }

    /**
     * Setter for <code>weather.forecast.wind_direction</code>.
     */
    public void setWindDirection(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>weather.forecast.wind_direction</code>.
     */
    public String getWindDirection() {
        return (String) get(6);
    }

    /**
     * Setter for <code>weather.forecast.atmospheric_pressure</code>.
     */
    public void setAtmosphericPressure(Float value) {
        set(7, value);
    }

    /**
     * Getter for <code>weather.forecast.atmospheric_pressure</code>.
     */
    public Float getAtmosphericPressure() {
        return (Float) get(7);
    }

    /**
     * Setter for <code>weather.forecast.air_humidity</code>.
     */
    public void setAirHumidity(Float value) {
        set(8, value);
    }

    /**
     * Getter for <code>weather.forecast.air_humidity</code>.
     */
    public Float getAirHumidity() {
        return (Float) get(8);
    }

    /**
     * Setter for <code>weather.forecast.city</code>.
     */
    public void setCity(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>weather.forecast.city</code>.
     */
    public String getCity() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, LocalDateTime, LocalDateTime, Float, Float, Float, String, Float, Float, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Integer, LocalDateTime, LocalDateTime, Float, Float, Float, String, Float, Float, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Forecast.FORECAST.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Forecast.FORECAST.CREATED_ON;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Forecast.FORECAST.DATE;
    }

    @Override
    public Field<Float> field4() {
        return Forecast.FORECAST.TEMPERATURE;
    }

    @Override
    public Field<Float> field5() {
        return Forecast.FORECAST.PERCEIVED_TEMPERATURE;
    }

    @Override
    public Field<Float> field6() {
        return Forecast.FORECAST.WIND_POWER;
    }

    @Override
    public Field<String> field7() {
        return Forecast.FORECAST.WIND_DIRECTION;
    }

    @Override
    public Field<Float> field8() {
        return Forecast.FORECAST.ATMOSPHERIC_PRESSURE;
    }

    @Override
    public Field<Float> field9() {
        return Forecast.FORECAST.AIR_HUMIDITY;
    }

    @Override
    public Field<String> field10() {
        return Forecast.FORECAST.CITY;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime component3() {
        return getDate();
    }

    @Override
    public Float component4() {
        return getTemperature();
    }

    @Override
    public Float component5() {
        return getPerceivedTemperature();
    }

    @Override
    public Float component6() {
        return getWindPower();
    }

    @Override
    public String component7() {
        return getWindDirection();
    }

    @Override
    public Float component8() {
        return getAtmosphericPressure();
    }

    @Override
    public Float component9() {
        return getAirHumidity();
    }

    @Override
    public String component10() {
        return getCity();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime value3() {
        return getDate();
    }

    @Override
    public Float value4() {
        return getTemperature();
    }

    @Override
    public Float value5() {
        return getPerceivedTemperature();
    }

    @Override
    public Float value6() {
        return getWindPower();
    }

    @Override
    public String value7() {
        return getWindDirection();
    }

    @Override
    public Float value8() {
        return getAtmosphericPressure();
    }

    @Override
    public Float value9() {
        return getAirHumidity();
    }

    @Override
    public String value10() {
        return getCity();
    }

    @Override
    public ForecastRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ForecastRecord value2(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public ForecastRecord value3(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public ForecastRecord value4(Float value) {
        setTemperature(value);
        return this;
    }

    @Override
    public ForecastRecord value5(Float value) {
        setPerceivedTemperature(value);
        return this;
    }

    @Override
    public ForecastRecord value6(Float value) {
        setWindPower(value);
        return this;
    }

    @Override
    public ForecastRecord value7(String value) {
        setWindDirection(value);
        return this;
    }

    @Override
    public ForecastRecord value8(Float value) {
        setAtmosphericPressure(value);
        return this;
    }

    @Override
    public ForecastRecord value9(Float value) {
        setAirHumidity(value);
        return this;
    }

    @Override
    public ForecastRecord value10(String value) {
        setCity(value);
        return this;
    }

    @Override
    public ForecastRecord values(Integer value1, LocalDateTime value2, LocalDateTime value3, Float value4, Float value5, Float value6, String value7, Float value8, Float value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ForecastRecord
     */
    public ForecastRecord() {
        super(Forecast.FORECAST);
    }

    /**
     * Create a detached, initialised ForecastRecord
     */
    public ForecastRecord(Integer id, LocalDateTime createdOn, LocalDateTime date, Float temperature, Float perceivedTemperature, Float windPower, String windDirection, Float atmosphericPressure, Float airHumidity, String city) {
        super(Forecast.FORECAST);

        set(0, id);
        set(1, createdOn);
        set(2, date);
        set(3, temperature);
        set(4, perceivedTemperature);
        set(5, windPower);
        set(6, windDirection);
        set(7, atmosphericPressure);
        set(8, airHumidity);
        set(9, city);
    }
}
